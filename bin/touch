#!/bin/bash

set -eo pipefail

function usage() {
  echo "Usage: $(basename $0) [OPTIONS] /path/to/file"
  echo ""
  echo "Selecting a filetype like executable or library is mandatory!"
  echo ""
  echo "Options:"
  echo -e "  -e, -x  Create executable script"
  echo -e "  -h      Show this information"
  echo -e "  -l      Create library file"
}

EXECUTABLE=

while getopts 'ehlx' flag; do
  case "${flag}" in
    e|x) EXECUTABLE=true ;;
    h) usage && exit 0 ;;
    l) EXECUTABLE=false ;;
    *) usage && exit 1 ;;
  esac
done

readonly EXECUTABLE

shift $(($OPTIND - 1))

[[ -z $1 ]] && usage && exit 1;
[[ -z $EXECUTABLE ]] && usage && exit 1;

readonly current_dir=$(dirname $(readlink -f $0))

source $current_dir/../lib/chalk.sh
source $current_dir/../lib/input.sh

author_email=
author_name=
copyright=
description=
ext="${1: -3}"
name="${1}"
  
if [[ $EXECUTABLE != "true" ]] && [[ $ext != '.sh' ]]; then
    name="${1}.sh"
fi

if [[ $EXECUTABLE == "true" ]] && [[ $ext == ".sh" ]]; then
  chalk -l warn "Executables should have no extension"

  if query_yes_no "Remove extension '.sh'?"; then
    name="${1:0:-3}"
  else
    name="${1}"
  fi
fi

if [[ -d $name ]]; then
  chalk -l error "Specified path is a directory" >&2
  exit 1
fi

if [[ -f $name ]]; then
  if query_yes_no "Specified file already exists. Overwrite?"; then
    chalk -l warn "Removing existing file '${name}'"
    rm $name
  else
    chalk -l warn "Omitting existing file '${name}'"
    exit
  fi
fi

mkdir -p $(dirname $name)

function executable_content() {
  local libpath=$(realpath --relative-to=$(dirname $name) $current_dir/../lib)

  echo "#!/bin/bash"

  if [[ ! -z "${description}" ]]; then
    echo "#"
    echo "# ${description}"
  fi

  if
    [[ ! -z "${author_email}" ]] || \
    [[ ! -z "${author_name}" ]] || \
    [[ ! -z "${copyright}" ]]
  then
    echo "#"
  fi

  if [[ ! -z "${copyright}" ]]; then
    echo "# Copyright ${copyright}"
  fi

  if [[ ! -z "${author_email}" ]] || [[ ! -z "${author_name}" ]]; then
    if [[ ! -z "${author_email}" ]]; then
      echo "# Author: ${author_email} (${author_name})"
    else
      echo "# Author: ${author_name}"
    fi
  fi

  echo ""
  echo "set -eo pipefail"
  echo ""
  echo "readonly current_dir=\$(dirname \$(readlink -f \$0))"
  echo "readonly bash_utils_lib_dir=\$(readlink -f \$current_dir/${libpath})"
  echo ""
  echo "source \$bash_utils_lib_dir/log_exit_error.sh"
}

function query_header() {
  query -o "Description" description

  if query_yes_no -n "Add author information"; then
    query -o "Author email" author_email
    query -d "${USER}" "Author name" author_name
  fi

  if query_yes_no -n "Add copyright information"; then
    query -d "$(date +'%Y') ${author_name:-$USER}" \
      "Copyright information" \
      copyright
  fi
}

function main() {
  local target=$(readlink -f $name)
  
  if [[ $EXECUTABLE == "true" ]]; then
    query_header
    executable_content > $target
    chmod +x $target
  else
    touch $target
    chmod -x $target
  fi
  
  chalk -l success "done"
}

main "$@"
