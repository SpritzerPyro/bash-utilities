#!/bin/bash

set -euo pipefail

function create_header() {
  if [[ "${description}" ]]; then
    echo "# ${description}"
  fi

  if
    [[ "${description}" ]] && \
    (
      [[ "${author_email}" ]] || \
      [[ "${author_name}" ]] || \
      [[ "${copyright}" ]]
    )
  then
    echo "#"
  fi

  if [[ "${copyright}" ]]; then
    echo "# Copyright ${copyright}"
  fi

  if [[ "${author_email}" ]] && [[ "${author_name}" ]]; then
    echo "# Author: ${author_email} (${author_name})"
  fi

  if [[ ! "${author_email}" ]] && [[ "${author_name}" ]]; then
    echo "# Author: ${author_name}"
  fi
}

function create_libname() {
  local -r _filename=$(basename "$1")

  if [[ "${_filename: -3}" == ".sh" ]]; then
    echo "${_filename:0:-3}"
  else
    echo "${_filename}"
  fi
}

function create_path() {
  local _filename="$1"

  if ! (( ${executable} )) && [[ "${_filename: -3}" != ".sh" ]]; then
    _filename="${_filename}.sh"
  fi

  if (( ${executable} )) && [[ "${_filename: -3}" == ".sh" ]]; then
    chalk -l warn "Executables should have no extension"

    if query::polar "Remove extension '.sh'?"; then
      _filename="${_filename:0:-3}"
    else
      _filename="${_filename}"
    fi
  fi

  local -r _path=$(readlink -m "${_filename}")

  if [[ -d "${_path}" ]]; then
    chalk -l error "Specified path '${_path}' is a directory" >&2
    exit 1
  fi

  if
    [[ -f "${_path}" ]] && \
    ! query::polar "Specified file already exists. Overwrite?"
  then
    chalk -l warn "Omitting existing file '${_path}'"
    exit
  fi

  eval "$2=\"${_path}\""
}

function escape_string() {
  echo $(basename "$1") \
    | tr -cs '[:alnum:]\n\r' '_' \
    | tr '[:upper:]' '[:lower:]'
}

function executable_content() {
  local -r header=$(create_header)
  local -r libpath=$(
    realpath --relative-to=$(dirname "${target}") "${script_dir}/../butils.sh"
  )

  echo "#!/bin/bash"

  if [[ "${header}" ]]; then
    echo "#"
    echo "${header}"
  fi

  echo ''
  echo 'set -euo pipefail'
  echo ''
  echo 'function main() {'
  echo '  readonly script_dir=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))'
  echo ''
  echo "  source \"\${script_dir}/${libpath}\""
  echo ''
  echo '  echo "Hello world"'
  echo '}'
  echo ''
  echo 'main "$@"'
}

function library_content() {
  local -r header=$(create_header)
  local -r libname=$(create_libname "${target}")

  if [[ "${header}" ]]; then
    echo "${header}"
    echo ""
  fi

  echo "#######################################"
  echo "# Description of the function."
  echo "# Globals:"
  echo "#   (List of global variables used and modified.)"
  echo "#   BACKUP_DIR"
  echo "# Arguments:"
  echo "#   (Arguments taken.)"
  echo "#   None"
  echo "# Outputs:"
  echo "#   (Output to STDOUT or STDERR.)"
  echo "#   Writes location to stdout"
  echo "# Returns:"
  echo "#   (Returned values other than the default exit" \
    "status of the last command run.)"
  echo "#   0 if thing was deleted, non-zero on error."
  echo "#######################################"
  echo "function ${libname}::my_func() {"
  echo "  echo \"Hello world\""
  echo "}"
}

function query_header() {
  declare -g author_email=""
  declare -g author_name=""
  declare -g copyright=""
  declare -g description=""

  query -o -v description "Description"

  if query::polar -n "Add author information?"; then
    query::email -o -v author_email "Author email"
    query -d "${USER}" -v author_name "Author name"
  fi

  if query::polar -n "Add copyright information?"; then
    query \
      -d "$(date +'%Y') ${author_name:-$USER}" \
      -v copyright \
      "Copyright information"
  fi
}

function usage() {
  echo "Usage: $(basename $0) [OPTIONS] /path/to/file"
  echo ""
  echo "Selecting a filetype like executable or library is mandatory!"
  echo ""
  echo "Options:"
  echo "  -e, -x  Create executable script"
  echo "  -h      Show this information"
  echo "  -l      Create library file"
}

function main() {
  declare -g executable
  declare -g target=""

  while getopts 'ehlx' flag; do
    case "${flag}" in
      e|x) executable=1 ;;
      h) usage && exit 0 ;;
      l) executable=0 ;;
      *) usage && exit 1 ;;
    esac
  done

  shift $(( ${OPTIND} - 1 ))

  if [[ ! "${1-}" ]] || [[ ! "${executable-}" ]]; then
    usage >&2
    exit 1
  fi

  readonly script_dir=$(dirname $(readlink -f "$0"))

  source "${script_dir}/../butils.sh"

  butils::use chalk
  butils::use query

  create_path "$1" target

  mkdir -p $(dirname "${target}")
  rm -f "${target}"

  query_header

  if (( ${executable} )); then
    executable_content > "${target}"
    chmod +x "${target}"
    chalk -l success "Successfully created executable '${target}'"
  else
    library_content > "${target}"
    chmod -x "${target}"
    chalk -l success "Successfully created library file '${target}'"
  fi
}

main "$@"
