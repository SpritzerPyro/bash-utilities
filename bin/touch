#!/bin/bash

set -eo pipefail

function usage() {
  echo "Usage: $(basename $0) [OPTIONS] /path/to/file"
  echo ""
  echo "Selecting a filetype like executable or library is mandatory!"
  echo ""
  echo "Options:"
  echo -e "  -e, -x  Create executable script"
  echo -e "  -h      Show this information"
  echo -e "  -l      Create library file"
}

EXECUTABLE=

while getopts 'ehlx' flag; do
  case "${flag}" in
    e|x) EXECUTABLE=true ;;
    h) usage && exit 0 ;;
    l) EXECUTABLE=false ;;
    *) usage && exit 1 ;;
  esac
done

readonly EXECUTABLE

shift $(($OPTIND - 1))

[[ -z $1 ]] && usage && exit 1;
[[ -z $EXECUTABLE ]] && usage && exit 1;

readonly current_dir=$(dirname $(readlink -f $0))

source $current_dir/../lib/init.sh

butils::import chalk
butils::import input

author_email=
author_name=
copyright=
description=
filename=
libname=

function create_header() {
  if [[ ! -z "${description}" ]]; then
    echo "# ${description}"
  fi

  if
    [[ ! -z "${description}" ]] && (
      [[ ! -z "${author_email}" ]] || \
      [[ ! -z "${author_name}" ]] || \
      [[ ! -z "${copyright}" ]]
    )
  then
    echo "#"
  fi

  if [[ ! -z "${copyright}" ]]; then
    echo "# Copyright ${copyright}"
  fi

  if [[ ! -z "${author_email}" ]] && [[ ! -z "${author_name}" ]]; then
    echo "# Author: ${author_email} (${author_name})"
  fi

  if [[ -z "${author_email}" ]] && [[ ! -z "${author_name}" ]]; then
    echo "# Author: ${author_name}"
  fi
}

function escape_string() {
  echo "$(basename "$1")" \
    | tr -cs '[:alnum:]\n\r' '_' \
    | tr '[:upper:]' '[:lower:]'
}

function executable_content() {
  local libpath=$(realpath --relative-to=$(dirname $filename) $current_dir/../lib)

  echo "#!/bin/bash"

  if [[ ! -z "$(create_header)" ]]; then
    echo "#"
    create_header
  fi

  echo ""
  echo "set -eo pipefail"
  echo ""
  echo "function main() {"
  echo "  local -r current_dir=\$(readlink -f \$(dirname \"\${BASH_SOURCE[0]}\"))"
  echo ""
  echo "  source \"\${current_dir}/${libpath}/init.sh\""
  echo ""
  echo "  echo \"Hello world\""
  echo "}"
  echo ""
  echo 'main "$@"'
}

function handle_path() {
  filename="${1}"
  local extension="${filename: -3}"

  if [[ $EXECUTABLE != "true" ]] && [[ $extension == '.sh' ]]; then
    libname=$(escape_string "${filename:0:-3}")
  fi

  if [[ $EXECUTABLE != "true" ]] && [[ $extension != '.sh' ]]; then
    libname=$(escape_string "${filename}")
    filename="${filename}.sh"
  fi

  if [[ $EXECUTABLE == "true" ]] && [[ $extension == ".sh" ]]; then
    chalk -l warn "Executables should have no extension"

    if query::polar "Remove extension '.sh'?"; then
      filename="${filename:0:-3}"
    else
      filename="${filename}"
    fi
  fi

  if [[ -d $filename ]]; then
    chalk -l error "Specified path is a directory" >&2
    exit 1
  fi

  if
    [[ -f $filename ]] && \
    ! query::polar "Specified file already exists. Overwrite?"
  then
    chalk -l warn "Omitting existing file '${filename}'"
    exit
  fi
}

function library_content() {
  if [[ ! -z "$(create_header)" ]]; then
    create_header
    echo ""
  fi

  echo "#######################################"
  echo "# Description of the function."
  echo "# Globals:"
  echo "#   (List of global variables used and modified.)"
  echo "#   BACKUP_DIR"
  echo "# Arguments:"
  echo "#   (Arguments taken.)"
  echo "#   None"
  echo "# Outputs:"
  echo "#   (Output to STDOUT or STDERR.)"
  echo "#   Writes location to stdout"
  echo "# Returns:"
  echo -n "#   (Returned values other than the default exit "
  echo "status of the last command run.)"
  echo "#   0 if thing was deleted, non-zero on error."
  echo "#######################################"
  echo "function ${libname}::my_func() {"
  echo "  echo \"Hello world\""
  echo "}"
}

function query_header() {
  query -o "Description" description

  if query::polar -n "Add author information"; then
    query::email -o "Author email" author_email
    query -d "${USER}" "Author name" author_name
  fi

  if query::polar -n "Add copyright information"; then
    query -d "$(date +'%Y') ${author_name:-$USER}" \
      "Copyright information" \
      copyright
  fi
}

function main() {
  handle_path "${1}"

  mkdir -p "$(dirname "$1")"
  rm -f "$1"

  local target=$(readlink -f $filename)

  query_header

  if [[ $EXECUTABLE == "true" ]]; then
    executable_content > $target
    chmod +x $target
    chalk -l success "Successfully created executable '${target}'"
  else
    library_content > $target
    chmod -x $target
    chalk -l success "Successfully created library file '${target}'"
  fi
}

main "$@"
